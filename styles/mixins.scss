@function px($size) {
  @return #{$size}+px;
}

$BP_WRAP_PADDING: 20;


%layoutWrap {
  .layout--wrap {}
}

@mixin layoutWrap($withBP: false) {
  max-width: px($LAYOUT_WRAP_SIZE);
  margin: 0 auto;
  width: 100%;
  @extend %layoutWrap;

  @debug $withBP;

  @if ($withBP==true) {
    @include max-min(max px($LAYOUT_WRAP_SIZE + 20)) {
      padding-inline: px($BP_WRAP_PADDING);
    }
  }

}

@mixin btn-style($bgColor) {
  padding: 14px 23px;
  background-color: $bgColor;
  cursor: pointer;
  outline: none;
  border: none;
}

@mixin Font_Avenir($size: 14px) {
  font-family: 'Avenir Next Georgian';
  font-size: $size;
}


@mixin Font_LBet_MT($size: 14px) {
  font-family: 'LBet STD MT';
  font-size: $size;
}

@mixin Font_LBet_NUS($size: 14px) {
  font-family: 'LBet STD NUS';
  font-size: $size;
}

$winner_space: 14;

@mixin winnerBlockWrap($width: 20, $height: 20, $important: 0) {
  width: px($width + ($winner_space * 2));
  height: px($height + ($winner_space * 2));
}

@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) !=number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  }

  @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $mode==round {
    @return round($number * $n) / $n;
  }

  @else if $mode==ceil {
    @return ceil($number * $n) / $n;
  }

  @else if $mode==floor {
    @return floor($number * $n) / $n;
  }

  @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

@function toVW($absoluteSize, $breakpoint) {
  @return #{($absoluteSize / $breakpoint) * 100}vw;
}