@function px($size) {
  @return #{$size}+px;
}

$BP_WRAP_PADDING: 20;


%layoutWrap {
  .layout--wrap {}
}

@mixin layoutWrap($withBP: false) {
  max-width: px($LAYOUT_WRAP_SIZE);
  margin: 0 auto;
  width: 100%;
  @extend %layoutWrap;

  // padding-inline: 5px;

  @if ($withBP==true) {
    @include max-min(min px($BP_TABLET_SM), max px($BP_TABLET)) {
      padding-inline: 10px;
    }

    @include max-min(min px($BP_TABLET), max px($LAYOUT_WRAP_SIZE + 40)) {
      padding-inline: 20px;
    }

    @include max-min(max px($LAYOUT_WRAP_SIZE + 40)) {
      margin: initial;
      max-width: 100%;
    }
  }
}


$bps-padding: ("sm": 5,
  "md-s": 10,
  "md": 20,
  "l-sm": 4,
  l-m: 5,
  l: 6,
  l-xl: 7,
  l-xxl: 8);


@mixin layoutOuter($args...) {


  @each $bpsKey,
  $bpsValue in $bps {

    @each $argValue,
    $argKey in $args {

      @if ($bpsValue==$argValue) {
        @include max-min(max px($argValue)) {
          margin-left: -#{map-get($bps-padding, $bpsKey)}px;
          margin-right: -#{map-get($bps-padding, $bpsKey)}px;
        }
      }


    }

  }
}



// @mixin layoutOuter($args...) {
//   margin-right: -5px;
//   margin-left: -5px;

//   @include max-min(min px($BP_TABLET_SM), max px($BP_TABLET)) {
//     margin-right: -10px;
//     margin-left: -10px;
//   }

//   @include max-min(min px($BP_TABLET), max px($LAYOUT_WRAP_SIZE + 40)) {
//     margin-right: -20px;
//     margin-left: -20px;
//   }
// }

@mixin btn-style($bgColor) {
  padding: 14px 23px;
  background-color: $bgColor;
  cursor: pointer;
  outline: none;
  border: none;
}

@mixin Font_Avenir($size: 14px) {
  font-family: 'Avenir Next Georgian';
  font-size: $size;
}


@mixin _Font_Avenir {
  font-family: 'Avenir Next Georgian';
}

@mixin _Font_LBet_MT {
  font-family: 'LBet STD MT';
}

@mixin _Font_LBet_NUS {
  font-family: 'LBet STD NUS';
}

@mixin Font_LBet_MT($size) {
  font-family: 'LBet STD MT';
  font-size: $size;
}

@mixin Font_LBet_NUS($size: 14px) {
  font-family: 'LBet STD NUS';
  font-size: $size;
}

$winner_space: 14;

@mixin winnerBlockWrap($width: 20, $height: 20, $important: 0) {
  width: px($width + ($winner_space * 2));
  height: px($height + ($winner_space * 2));
}


@mixin modalCloseButton() {
  position: absolute;
  top: 30px;
  right: 30px;
  @content;
}

%borderStyle {
  background: #FFFFFF;
  box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.08);
  border-radius: 16px;
}

%list-menu {}


@function rgbaToHex($color, $alpha) {
  $color-accent: $color;
  $color-accent-bg: rgba($color-accent, $alpha);
  $ie-hex: ie_hex_str($color-accent-bg); //#33039B15
  $back-to-color-accent: unquote('#'+ str_slice($ie-hex, 4)); //#039B15

  @return $ie-hex;
}

// gist: https://gist.github.com/deeperton/addd1498854fdd1f37ebbebb9f7d4b4c
@function rgba-to-rgb($rgba, $opacity: 0, $background: #fff) {
  @if $opacity>0 {
    @if $opacity < 1 {
      $opacity: $opacity * 100
    }

    @return mix(mix(rgb(red($rgba), green($rgba), blue($rgba)), $background, alpha($rgba) * 100%), rgb(255, 255, 255), $opacity)
  }

  @return mix(rgb(red($rgba), green($rgba), blue($rgba)), $background, alpha($rgba) * 100%)
}












// !!!!!!!!!!!!

@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) !=number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  }

  @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $mode==round {
    @return round($number * $n) / $n;
  }

  @else if $mode==ceil {
    @return ceil($number * $n) / $n;
  }

  @else if $mode==floor {
    @return floor($number * $n) / $n;
  }

  @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

@function toVW($absoluteSize, $breakpoint) {
  @return #{($absoluteSize / $breakpoint) * 100}vw;
}